app.controller 'MainCtrl', ['$scope', '$http', ($scope, $http) ->
  ### Available datasets ###
  $scope.datasets = [
  	{'name': 'example'},
    {'name': 'Basketball'}
  ]
  ###  {'name': 'Medical'} We made the decision not to persue the medical dataset ###
  refEvts = {}
  
  $scope.categories = []
  $scope.selectedDataset = $scope.datasets[0]
  $scope.data = []
  $scope.records = []
  $scope.groups = [ [], [] ] # group A is empty and group B is empty

  
  ### React to selectDataset selection changes ###
  $scope.$watch('selectedDataset', (newValue, oldValue, $scope) -> fetchJSON(newValue.name); return newValue; )
  
  ### Fetch the requested dataset
      In the callback, update the dataset
  ###
  cb = (data) -> $scope.data = data;
  fetchJSON = (fileName) -> $http.get('datasets/'+fileName+'.json').success( cb );  
  
  ### Edit scope.categories ###
  preprocess = (json) ->
    refEvts = {}
    $scope.categories = []
    if json.events
      for p in json.events
        # Builds a list of categories 
        $scope.categories.push(p.event) if p.event not in $scope.categories
		
        # Is this like a normalizing thing? Dont worry about this in the example dataset
        # if p.ts
        #  p.ts = moment(p.ts)
        #  if p.te
        #    p.te = moment(p.te)
      $scope.categories.sort()
  ### Update categories for each dataset ###
  $scope.$watch('data', (newValue, oldValue, $scope) -> preprocess(newValue) );
  
  doubleAndCopy = (arr) -> 
    arr2 = Array(arr.length*2)
    for i in [0..arr.length]
      arr2[i] = arr[i]
    return arr2
	
  # Performance wise, this is going to be terribe
  doTimeSeries = (categories) ->
      console.log('Do time Seires')
	  # Example elementwise sort, homes.sort(function(a,b) { return parseFloat(a.price) - parseFloat(b.price) } );
      # Your going to need an elementwise comparison
      m = []
      for elem1 in categories
        m[elem1] = []
        for elem2 in categories
          m[elem1][elem2] = { }
          m[elem1][elem2]['numElem'] = 0
          m[elem1][elem2]['td'] = Array(100)
      if $scope.data.events
        for a in $scope.data.events
          for b in $scope.data.events
            nElem = m[a.event][b.event]['numElem'] 
            m[a.event][b.event]['numElem'] = nElem + 1
            if nElem >= m[a.event][b.event]['td'].length 
              m[a.event][b.event]['td'] = doubleAndCopy(m[a.event][b.event]['td'])
            m[a.event][b.event]['td'][nElem] = b.ts - a.ts
  $scope.$watch('categories', (newValue, oldvalue, $scope) -> doTimeSeries(newValue) );
  
  ### Does hist meet support thresh/similarity ###
  interestingScorePair = ( timeSeries ) -> return 1.0; 
  similarityScorePair  = ( timeSeriesA, timeSeriesB ) -> return 1.0; 

  # TODO Get rid of this chart, needs to be autogenerated based on data
  $http.get("datasets/basicAreaChart.json").success (data) ->
    $scope.basicAreaChart = data	
]



